# This is the main workflow for the CI/CD pipeline.
# It is triggered on push to main, develop, or feature/* branches,
# and on pull requests to main or develop branches.
# It also has a manual trigger for workflow_dispatch.
name: CI/CD

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - '**/*.tsx'
      - '**/*.ts'
      - '**/*.js'
      - '**/*.json'
      - 'vite.config.*'
      - 'package.json'
      - 'package-lock.json'
      - 'client/**'
      - 'server/**'
      - 'admin/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.tsx'
      - '**/*.ts'
      - '**/*.js'
      - '**/*.json'
      - 'vite.config.*'
      - 'package.json'
      - 'package-lock.json'
      - 'client/**'
      - 'server/**'
      - 'admin/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies and build server
        run: |
          cd server
          npm ci
          npm run build
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}

      - name: Run server tests with coverage
        run: |
          cd server
          npm run test -- --coverage
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}

      - name: Install dependencies and build client
        run: |
          cd client
          npm ci
          npm run build
        env:
          VITE_BASE_apiKey: ${{ secrets.VITE_BASE_APIKEY }}
          VITE_BASE_authDomain: ${{ secrets.VITE_BASE_AUTHDOMAIN }}
          VITE_BASE_projectId: ${{ secrets.VITE_BASE_PROJECTID }}
          VITE_BASE_storageBucket: ${{ secrets.VITE_BASE_STORAGEBUCKET }}
          VITE_BASE_messagingSenderId: ${{ secrets.VITE_BASE_MESSAGINGSENDERID }}
          VITE_BASE_appId: ${{ secrets.VITE_BASE_APPID }}
          VITE_API_URL: ${{ secrets.VITE_API_URL }}

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: server/coverage

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: client/dist

  # Job to deploy the application to the staging environment
  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: ./client/dist

      - name: Deploy to Netlify (Staging)
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './client/dist'
          production-branch: develop
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy to staging from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}

  # Job to deploy the application to the production environment
  deploy-production:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: ./client/dist

      - name: Deploy to Netlify (Production)
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './client/dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy to production from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PRODUCTION_SITE_ID }}

  # Job to deploy the application to the admin environment
  deploy-admin:
    needs: build
    if: github.ref == 'refs/heads/admin'
    runs-on: ubuntu-latest
    environment: admin
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: ./client/dist

      - name: Deploy to Netlify (Admin)
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './client/dist'
          production-branch: admin
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy to admin from GitHub Actions"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_ADMIN_SITE_ID }}

  # Job to deploy the backend to Render
  deploy-backend:
    needs: build
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Render
        run: curl ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
