openapi: 3.0.0
info:
  title: GenKiKoi API
  version: 1.0.0
  description: API documentation for GenKiKoi service
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
servers:
  - url: http://localhost:5000
    description: Development server
paths:
  /api/auth/register:
    post:
      summary: Register a new user (GUEST)
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - confirmPassword
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                confirmPassword:
                  type: string
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      token:
                        type: string
        400:
          description: Validation error
        500:
          description: Server error
  /api/auth/login:
    post:
      summary: Login (GUEST)
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
              properties:
                login:
                  type: string
                  example: Customer_minthep26
                password:
                  type: string
                  example: Customer_minthep26
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      token:
                        type: string
        400:
          description: Validation error
        500:
          description: Server error
  /api/auth/login-google:
    post:
      summary: Login with Google
      description: Logs in a user using Google credentials
      tags: [Authentication]
      requestBody:
        description: Google credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - username
                - photoUrl
              properties:
                email:
                  type: string
                  description: Email address of the user
                username:
                  type: string
                  description: Username of the user
                photoUrl:
                  type: string
                  description: Profile picture URL
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: User ID
                      username:
                        type: string
                        description: Username
                      email:
                        type: string
                        description: Email
                      role:
                        type: string
                        description: User role
                      photoUrl:
                        type: string
                        description: Profile picture URL
                      token:
                        type: string
                        description: Authentication token
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
  /api/auth/login-admin:
    post:
      summary: Login as an admin
      description: Logs in an admin user with the provided credentials
      tags: [Authentication]
      requestBody:
        description: Admin credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: Email address of the admin
                  example: Admin_minthep26@gmail.com
                password:
                  type: string
                  description: Password for the admin account
                  example: Admin_minthep26
      responses:
        200:
          description: Admin logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Admin ID
                      username:
                        type: string
                        description: Admin username
                      email:
                        type: string
                        description: Admin email
                      role:
                        type: string
                        description: Admin role
                      token:
                        type: string
                        description: Authentication token
        400:
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    description: Validation errors
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
  /api/auth/check-username:
    post:
      summary: Check if a username exists
      description: Checks if a given username is already in use
      tags: [Authentication]
      requestBody:
        description: Username to check
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
              properties:
                username:
                  type: string
                  description: Username to check
      responses:
        200:
          description: Username existence check result
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    description: Indicates if the username exists
                  userId:
                    type: string
                    description: User ID if the username exists
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
  /api/auth/check-email:
    post:
      summary: Check if an email exists
      description: Checks if a given email is already in use
      tags: [Authentication]
      requestBody:
        description: Email to check
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  description: Email to check
      responses:
        200:
          description: Email existence check result
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                    description: Indicates if the email exists
                  userId:
                    type: string
                    description: User ID if the email exists
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
  /api/users/update-profile:
    patch:
      summary: Update user profile
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                fullName:
                  type: string
                phoneNumber:
                  type: string
                gender:
                  type: string
                city:
                  type: string
                district:
                  type: string
                ward:
                  type: string
                photoUrl:
                  type: string
                detailAddress:
                  type: string
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                      username:
                        type: string
                      email:
                        type: string
                      photoUrl:
                        type: string
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /api/users/:
    get:
      summary: Get user profile
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                      username:
                        type: string
                      fullName:
                        type: string
                      phoneNumber:
                        type: string
                      photoUrl:
                        type: string
                      gender:
                        type: string
                      city:
                        type: string
                      district:
                        type: string
                      ward:
                        type: string
                      detailAddress:
                        type: string
        401:
          description: User ID not found
        404:
          description: User information not found
        500:
          description: Server error

